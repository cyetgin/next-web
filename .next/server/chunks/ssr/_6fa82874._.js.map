{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/contact.ts"],"sourcesContent":["\"use server\";\n\nimport { z } from 'zod';\n\nconst ContactFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters.\"),\n  email: z.string().email(\"Invalid email address.\"),\n  message: z.string().min(10, \"Message must be at least 10 characters long.\"),\n});\n\nexport interface ContactFormState {\n  message: string | null;\n  errors?: {\n    name?: string[];\n    email?: string[];\n    message?: string[];\n  };\n  success: boolean;\n}\n\nexport async function handleContactForm(\n  prevState: ContactFormState,\n  formData: FormData\n): Promise<ContactFormState> {\n  const validatedFields = ContactFormSchema.safeParse({\n    name: formData.get('name'),\n    email: formData.get('email'),\n    message: formData.get('message'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      message: \"Validation failed. Please check your input.\",\n      errors: validatedFields.error.flatten().fieldErrors,\n      success: false,\n    };\n  }\n\n  // Simulate sending email or saving to a database\n  console.log(\"Contact Form Submitted:\", {\n    name: validatedFields.data.name,\n    email: validatedFields.data.email,\n    message: validatedFields.data.message,\n  });\n\n  // In a real application, you would integrate with an email service\n  // or save the inquiry to a database here.\n\n  return {\n    message: \"Thank you for your message! We'll get back to you soon.\",\n    success: true,\n    errors: {}, // Clear errors on success\n  };\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEA,MAAM,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;AAC9B;AAYO,eAAe,uCAAe,GAAf,kBACpB,SAA2B,EAC3B,QAAkB;IAElB,MAAM,kBAAkB,kBAAkB,SAAS,CAAC;QAClD,MAAM,SAAS,GAAG,CAAC;QACnB,OAAO,SAAS,GAAG,CAAC;QACpB,SAAS,SAAS,GAAG,CAAC;IACxB;IAEA,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YACL,SAAS;YACT,QAAQ,gBAAgB,KAAK,CAAC,OAAO,GAAG,WAAW;YACnD,SAAS;QACX;IACF;IAEA,iDAAiD;IACjD,QAAQ,GAAG,CAAC,2BAA2B;QACrC,MAAM,gBAAgB,IAAI,CAAC,IAAI;QAC/B,OAAO,gBAAgB,IAAI,CAAC,KAAK;QACjC,SAAS,gBAAgB,IAAI,CAAC,OAAO;IACvC;IAEA,mEAAmE;IACnE,0CAA0C;IAE1C,OAAO;QACL,SAAS;QACT,SAAS;QACT,QAAQ,CAAC;IACX;AACF;;;IAjCsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/contact/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/contact/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/contact/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4R,GACzT,0DACA","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/contact/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/contact/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/contact/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwQ,GACrS,sCACA","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}